
mkdir

pwd

git init

git diff <file>

git add ./*   //把文件添加到暂存区
git diff --cached  

git commit -m "测试"   //提交所有add过得文件 后面是注释
git status -v  //查看仓库状态
git show

git push

git pull

git log  //查看历史记录

git reset -- hard HEAD^[^^,^^^]       回退几个版本，有几个^就表示回退几个版本

git reset  –hard HEAD~100      回退100个版本，可以是任意数字

cat <file>        查看文件内容

git branch -a 查看远程分支
git remote update origin  #fetch远程分支
git checkout -b feature-Otest-3711 origin/feature-Otest-3711 切换分支





git checkout -b bug_fix -t remotes/origin/bug_fix    checkout -b 表示新建本地分支，bug_fix 为本地分支名，你也可以起别的名字。-t 表示追踪远程分支（track），remotes/origin/bug_fix 为远程分支名，查看检出结果：
git checkout feature_shopping：切换到本地需求分支
git push origin HEAD:refs/for/master：将本地需求分支的提交推送到远程 master 分支

7. 回退提交
commit 之后，发现提交多了，把不需要提交的也提交了，此时需要回退，有两种方式：

git reset [--soft] commit_id，软回退，不会丢弃文件修改记录，--soft 不加也可以。
git reset --hard commit_id，硬回退，丢弃所有修改。一般仅在需要回退到指定节点验证问题时使用。

一，

未使用 git add 缓存代码时。

可以使用 git checkout -- filepathname (比如： git checkout -- readme.md  ，不要忘记中间的 “--” ，不写就成了检出分支了！！)。放弃所有的文件修改可以使用 git checkout .  命令。

此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件。因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。

 

二，

已经使用了  git add 缓存了代码。

可以使用  git reset HEAD filepathname （比如： git reset HEAD readme.md）来放弃指定文件的缓存，放弃所以的缓存可以使用 git reset HEAD . 命令。

此命令用来清除 git  对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了如（一）所示的状态。继续用（一）中的操作，就可以放弃本地的修改。

 

三，

已经用 git commit  提交了代码。

可以使用 git reset --hard HEAD^ 来回退到上一次commit的状态。此命令可以用来回退到任意版本：git reset --hard  commitid 

你可以使用 git log 命令来查看git的提交历史。git log 的输出如下,之一这里可以看到第一行就是 commitid：

git reset --soft commitID 撤销push
git reset HEAD . 撤销提交


命令 git checkout --readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销
git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令

　　git branch dev

　　git checkout dev










